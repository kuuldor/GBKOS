PIME实现说明

PIME由以下几个部分构成：

  * 数据库文件：存储码表、词组、词频等数据的Palm数据库。
  * PimeKernel：PIME的核心模块，操作数据库文件，并向PimeUI提供调用接口。
  * PimeUI：PIME的用户界面模块。
  * PimeApp：PIME的应用程序模块，负责将其他模块组装起来协调运行。

PimeKernel接口：

  // PimeKernel结构。这个结构由Kernel内部维护，外部不可访问。
  typedef struct tagPimeKernel
  {
    
  } PimeKernelType, *PimeKernelHandle;

  // 启动、停止和获得Kernel
  PimeKernelHandle PimeKernelStart(); // 启动Kernel，如果Kernel已经启动过，则返回NULL。
  void PimeKernelStop(PimeKernelHandle kernel); // 停止Kernel，释放资源。
  PimeKernelHandle PimeKernelGet(); // 获得当前的Kernel。当前Kernel指针可以保存在Ftr中，Start的时候保存，Stop的时候清除（存NULL）。

  // 注册和注销状态监听器
  Boolean PimeKernelListenerRegister(PimeKernelHandle kernel, void (*onChangeFunc)(PimeKernelHandle, void *), void *arg); // 注册onChangeFunc为状态监听函数，当Kernel的状态发生变化时，调用这个注册的函数，并使用kernel和arg为参数。
  void PimeKernelListenerUnRegister(PimeKernelHandle kernel, void (*onChangeFunc)(PimeKernelHandle, void *)); // 注销onChangeFunc监听函数。

  // 初始化
  void PimeKernelInit(PimeKernelHandle kernel); // 初始化Kernel。客户会在启动Kernel、注册Listener后调用这个函数。这个函数应该初始化状态后回调Listener，以便Listener更新界面。

  // 输入法
  void PimeKernelImeSwitchToNext(PimeKernelHandle kernel); // 切换到下一个输入法

  const Char *PimeKernelImeGetName(PimeKernelHandle kernel); // 获得当前的Ime的名字
  const Char *PimeKernelImeGetShortName(PimeKernelHandle kernel); // 获得当前的Ime的短名

  // 编码
  void PimeKernelCodeClear(PimeKernelHandle kernel); // 清空当前已经输入的编码
  Boolean PimeKernelCodeAppend(PimeKernelHandle kernel, Char ch); // 增加一个输入的编码。如果ch不是可用编码的字符，则返回false。
  Boolean PimeKernelCodeDelete(PimeKernelHandle kernel); // 删除最后一个输入的编码。如果当前编码已经为空，没有任何可供删除的编码，则返回false。

  const Char *PimeKernelCodeGet(PimeKernelHandle kernel); // 获得当前已经输入的编码，如果没有任何编码，返回""。

  // 候选字
  typedef struct tagPimeHintIterator
  {
    const Char *hint;
  } PimeHintIteratorType, *PimeHintIteratorPtr;

  // 获得候选字。PimeHintIteratorType结构体中const Char* hint成员是供这些函数的客户使用的，用于保存候选字。为了记录当前位置，这个结构体中会有一些Kernel内部使用的字段。
  Boolean PimeKernelHintGetFirst(PimeKernelHandle kernel, PimeHintIteratorPtr it);
  Boolean PimeKernelHintGetNext(PimeKernelHandle kernel, PimeHintIteratorPtr it);
  Boolean PimeKernelHintGetPrevious(PimeKernelHandle kernel, PimeHintIteratorPtr it);

  // 已识别的字词
  void PimeKernelWordSet(PimeKernelHandle kernel, const Char *word); // 选定word作为已识别或已选择的字词。

  const Char *PimeKernelWordGet(PimeKernelHandle kernel); // 获得当前已经识别的字词或已经选择的字词。如果没有，则返回""。

一些说明：

  * 所有带有Get的函数用于Listener更新显示状态用，只有在Kernel回调Listener的时候才会使用。因此对于各种Char *类型的参数或结果，只要保证回调Listener期间可用就行，如果客户需要在将来使用这类结果，由客户自己负责创建一个副本。这样做可以简化内存管理。总之，内存分配原则就是：谁分配谁释放。

  * 除了获得状态的函数外，其他的都是动作函数。如果动作函数会引起Get类函数返回值的变化，则需要回调已经注册的Listener，以便Listener更新界面显示。

  * Kernel的客户不负责进行匹配。例如：客户调用PimeKernelCodeAppend后，Kernel应该试图去匹配候选字、或匹配已识别的字词。如果已经识别，则Kernel自动清除Code内容，设置已经识别的字词，并回调Listener。其他情况做类似处理。

PimeKernel的客户可能像下面这样调用Kernel接口：

  ...
  PimeKernelHandle kernel = PimeKernelStart();

  if (kenrel != NULL)
  {
    PimeKernelRegisterListener(kernel, onKernelChange, &someArg);

    PimeKernelInit(kernel);

    EventLoop(kernel);

    PimeKernelUnRegisterListener(kernel, onKernelChange);

    PimeKernelStop(kernel);
  }

  ...
  Boolean handled = PimeKernelCodeAppend(kernel, event->data.keyDown.chr);
  if (!handled)
    FrmDispatchEvent(event);
  ...

  void OnKernelChange(PimeKernelHandle kernel, void *arg)
  {
    MyStruct *my = (MyStruct *)arg;

    const Char *word = PimeKernelWordGet(kernel);
    if (word != NULL)
      InsertTextInImeField(word);

    const Char *imeShortName = PimeKernelImeGetShortName(kernel);
    SetImeFieldText(imeShortName);

    const Char *code = PimeKernelCodeGet(kernel);
    SetCodeFieldText(code);

    ...
  }